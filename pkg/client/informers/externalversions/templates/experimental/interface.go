// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

// This file was automatically generated by informer-gen

package experimental

import (
	internalinterfaces "github.com/Azure/service-catalog-templates/pkg/client/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// BindingTemplates returns a BindingTemplateInformer.
	BindingTemplates() BindingTemplateInformer
	// BrokerBindingTemplates returns a BrokerBindingTemplateInformer.
	BrokerBindingTemplates() BrokerBindingTemplateInformer
	// BrokerInstanceTemplates returns a BrokerInstanceTemplateInformer.
	BrokerInstanceTemplates() BrokerInstanceTemplateInformer
	// ClusterBindingTemplates returns a ClusterBindingTemplateInformer.
	ClusterBindingTemplates() ClusterBindingTemplateInformer
	// ClusterInstanceTemplates returns a ClusterInstanceTemplateInformer.
	ClusterInstanceTemplates() ClusterInstanceTemplateInformer
	// InstanceTemplates returns a InstanceTemplateInformer.
	InstanceTemplates() InstanceTemplateInformer
	// TemplatedBindings returns a TemplatedBindingInformer.
	TemplatedBindings() TemplatedBindingInformer
	// TemplatedInstances returns a TemplatedInstanceInformer.
	TemplatedInstances() TemplatedInstanceInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// BindingTemplates returns a BindingTemplateInformer.
func (v *version) BindingTemplates() BindingTemplateInformer {
	return &bindingTemplateInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// BrokerBindingTemplates returns a BrokerBindingTemplateInformer.
func (v *version) BrokerBindingTemplates() BrokerBindingTemplateInformer {
	return &brokerBindingTemplateInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// BrokerInstanceTemplates returns a BrokerInstanceTemplateInformer.
func (v *version) BrokerInstanceTemplates() BrokerInstanceTemplateInformer {
	return &brokerInstanceTemplateInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ClusterBindingTemplates returns a ClusterBindingTemplateInformer.
func (v *version) ClusterBindingTemplates() ClusterBindingTemplateInformer {
	return &clusterBindingTemplateInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ClusterInstanceTemplates returns a ClusterInstanceTemplateInformer.
func (v *version) ClusterInstanceTemplates() ClusterInstanceTemplateInformer {
	return &clusterInstanceTemplateInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// InstanceTemplates returns a InstanceTemplateInformer.
func (v *version) InstanceTemplates() InstanceTemplateInformer {
	return &instanceTemplateInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// TemplatedBindings returns a TemplatedBindingInformer.
func (v *version) TemplatedBindings() TemplatedBindingInformer {
	return &templatedBindingInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// TemplatedInstances returns a TemplatedInstanceInformer.
func (v *version) TemplatedInstances() TemplatedInstanceInformer {
	return &templatedInstanceInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
