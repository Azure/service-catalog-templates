// This file was automatically generated by lister-gen

package experimental

import (
	experimental "github.com/Azure/service-catalog-templates/pkg/apis/templates/experimental"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceLister helps list Instances.
type InstanceLister interface {
	// List lists all Instances in the indexer.
	List(selector labels.Selector) (ret []*experimental.Instance, err error)
	// Instances returns an object that can list and get Instances.
	Instances(namespace string) InstanceNamespaceLister
	InstanceListerExpansion
}

// instanceLister implements the InstanceLister interface.
type instanceLister struct {
	indexer cache.Indexer
}

// NewInstanceLister returns a new InstanceLister.
func NewInstanceLister(indexer cache.Indexer) InstanceLister {
	return &instanceLister{indexer: indexer}
}

// List lists all Instances in the indexer.
func (s *instanceLister) List(selector labels.Selector) (ret []*experimental.Instance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*experimental.Instance))
	})
	return ret, err
}

// Instances returns an object that can list and get Instances.
func (s *instanceLister) Instances(namespace string) InstanceNamespaceLister {
	return instanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceNamespaceLister helps list and get Instances.
type InstanceNamespaceLister interface {
	// List lists all Instances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*experimental.Instance, err error)
	// Get retrieves the Instance from the indexer for a given namespace and name.
	Get(name string) (*experimental.Instance, error)
	InstanceNamespaceListerExpansion
}

// instanceNamespaceLister implements the InstanceNamespaceLister
// interface.
type instanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Instances in the indexer for a given namespace.
func (s instanceNamespaceLister) List(selector labels.Selector) (ret []*experimental.Instance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*experimental.Instance))
	})
	return ret, err
}

// Get retrieves the Instance from the indexer for a given namespace and name.
func (s instanceNamespaceLister) Get(name string) (*experimental.Instance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(experimental.Resource("instance"), name)
	}
	return obj.(*experimental.Instance), nil
}
