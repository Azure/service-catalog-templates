// This file was automatically generated by lister-gen

package experimental

import (
	experimental "github.com/Azure/service-catalog-templates/pkg/apis/templates/experimental"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BindingTemplateLister helps list BindingTemplates.
type BindingTemplateLister interface {
	// List lists all BindingTemplates in the indexer.
	List(selector labels.Selector) (ret []*experimental.BindingTemplate, err error)
	// BindingTemplates returns an object that can list and get BindingTemplates.
	BindingTemplates(namespace string) BindingTemplateNamespaceLister
	BindingTemplateListerExpansion
}

// bindingTemplateLister implements the BindingTemplateLister interface.
type bindingTemplateLister struct {
	indexer cache.Indexer
}

// NewBindingTemplateLister returns a new BindingTemplateLister.
func NewBindingTemplateLister(indexer cache.Indexer) BindingTemplateLister {
	return &bindingTemplateLister{indexer: indexer}
}

// List lists all BindingTemplates in the indexer.
func (s *bindingTemplateLister) List(selector labels.Selector) (ret []*experimental.BindingTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*experimental.BindingTemplate))
	})
	return ret, err
}

// BindingTemplates returns an object that can list and get BindingTemplates.
func (s *bindingTemplateLister) BindingTemplates(namespace string) BindingTemplateNamespaceLister {
	return bindingTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BindingTemplateNamespaceLister helps list and get BindingTemplates.
type BindingTemplateNamespaceLister interface {
	// List lists all BindingTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*experimental.BindingTemplate, err error)
	// Get retrieves the BindingTemplate from the indexer for a given namespace and name.
	Get(name string) (*experimental.BindingTemplate, error)
	BindingTemplateNamespaceListerExpansion
}

// bindingTemplateNamespaceLister implements the BindingTemplateNamespaceLister
// interface.
type bindingTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BindingTemplates in the indexer for a given namespace.
func (s bindingTemplateNamespaceLister) List(selector labels.Selector) (ret []*experimental.BindingTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*experimental.BindingTemplate))
	})
	return ret, err
}

// Get retrieves the BindingTemplate from the indexer for a given namespace and name.
func (s bindingTemplateNamespaceLister) Get(name string) (*experimental.BindingTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(experimental.Resource("bindingtemplate"), name)
	}
	return obj.(*experimental.BindingTemplate), nil
}
