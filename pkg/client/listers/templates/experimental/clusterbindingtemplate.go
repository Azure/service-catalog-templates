// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

// This file was automatically generated by lister-gen

package experimental

import (
	experimental "github.com/Azure/service-catalog-templates/pkg/apis/templates/experimental"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterBindingTemplateLister helps list ClusterBindingTemplates.
type ClusterBindingTemplateLister interface {
	// List lists all ClusterBindingTemplates in the indexer.
	List(selector labels.Selector) (ret []*experimental.ClusterBindingTemplate, err error)
	// Get retrieves the ClusterBindingTemplate from the index for a given name.
	Get(name string) (*experimental.ClusterBindingTemplate, error)
	ClusterBindingTemplateListerExpansion
}

// clusterBindingTemplateLister implements the ClusterBindingTemplateLister interface.
type clusterBindingTemplateLister struct {
	indexer cache.Indexer
}

// NewClusterBindingTemplateLister returns a new ClusterBindingTemplateLister.
func NewClusterBindingTemplateLister(indexer cache.Indexer) ClusterBindingTemplateLister {
	return &clusterBindingTemplateLister{indexer: indexer}
}

// List lists all ClusterBindingTemplates in the indexer.
func (s *clusterBindingTemplateLister) List(selector labels.Selector) (ret []*experimental.ClusterBindingTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*experimental.ClusterBindingTemplate))
	})
	return ret, err
}

// Get retrieves the ClusterBindingTemplate from the index for a given name.
func (s *clusterBindingTemplateLister) Get(name string) (*experimental.ClusterBindingTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(experimental.Resource("clusterbindingtemplate"), name)
	}
	return obj.(*experimental.ClusterBindingTemplate), nil
}
